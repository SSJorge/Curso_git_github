en la git bash:
pwd te dice en qué directorio estás
touch nombre_archivo crea un archivo
cat nombre_archivo muestra el contenido
history te lista numerada todos los comandos que has hecho
!numero_comando repite el comando especificado
rm nombre_archivo lo borra, -f lo fuerza. 
rm --help te dice otras funciones (sirve para cualquier comando)

git init crea carpeta .git (repositorio)
git status ve el estado(?
git add añade archivos para commitearlos
git log me da todo el historial de commits
git remove nombre_archivo si quiero deshacer un git add (git --cached nombre_arch)
git checkout codigo (el codigo que sale en el commit al hacer git log) te devuelve a esa version
git show muestra lo que se modifico de un commit a otro

git config --global (un solo - espera letra y -- espera palabra)

si se ven muchos commit en git log aprietas q para salir (espacio para ver los demas?)

git branch nos dice todas las ramas que tnemos, git branch -r  nos dice las ramas remotas, -a para ver todas

si hago commit sin comentario me manda a bin, esc y q no sirven para salir, aprieto i y abajo dira INSERT, escribo el comentario, luego esc y :wq, o esc shift zz. :q! se aborta el commit

git diff codigo_commit1 codigo_commit2 (el orden importa)

git reset codigo_commit deshace los cambios hasta ese commit, con --hard los deshace por siempre y con soft aun se quedan en staging

git commit -am hace el add altiro (tambien espera comentario)

git log --stat tambien muestra lo que se cambió

git push sube cambios a repo remoto
git pull trae los cambios del repo remoto
fecth trae la actualizacion. merge (te copia esa actualizacion en los archivos locales) las junta. pull es fecth y merge

git branch nos muestra todas las ramas que tenemos
git branch nombre_rama
git checkout nombre_rama para moverse a esa rama
git branch -D nombre_rama para borrarla

puedo hacer git log nombre_rama desde master

el merge trae los cambios, o sea se hace en master de una rama x
git merge nombre_rama

conflicto merge (arreglar en el editor, en el ej borra >>>>>HEAD <<<<<otra_rama y borra la linea que no quiere guardar para dejar la que si va)
 y luego hacer commit y listo 


{
para mandarlo a un repo remoto:
git remote add origin codigo_pegado_repo_remoto_https
git push origin master (vas a hacer un push al origin de la rama master)
git pull origin master
git pull origin master --allow-unrelated-histories (por si salia un error en el comando anterior )
git push origin master

git pull origin main --allow-unrelated-histories
resolver conflictos
git coomit -am ""
git pull origin main
}
O mejor omitir el README y 
insertar comandos que salen en github
si remote da error usar comando git remote remove origin y luego seguir

si hago cambios en github luego debo hacer git pull o git pull origin main. Al hacer git log si están en la misma versión git y github saldrá que el HEAD -> main,origin/main

eliminar repositorio local rm -rf .git 

con https si pierdo mi computadora y alguien tiene acceso a ella puede estar haciendo commits o cosas directamente sobre giyhub, y con ssh es un poco mas dificil
en un intercambio de datos entre un ente x e y, cada uno tiene su llave publica y privada, x manda mensajes a y con la llave publica de y y dsp el los desifra con su propia llave privada
lo recomendable es hacer ña ssh key en el home (users/jorge)
ssh-keygen -t rsa -b 4096 -C "correo"
pregunta donde quieres guardarla, solo apretar enter
pregunta por passphrase
agregar la clave publica al path
eval $(ssh-agent -s)    evalua si ese comando se dispara
a el le sale Agent pid 2311, agent significa que efectivamente está corriendo, pid es process id y el numero es el n del proceso
el servidor aun no sabe que la llave se creo
ir a carpeta ssh en git bash
ssh-add ruta(la de el es ~/.ssh/id_rsa)
en github ir a settings ssh and gpg keys, new ssh key, poner titulo y en key añadir el texto de la key pub 
git remote set-url origin cambiar nombre origin (?)
git remote set-url origin ssh_key_github

git log --all --graph
--decorate --oneline
alias ramas="git log --all --graph --decorate --oneline"
ahora si ingreso ramas se ejecuta ese comando en el git bash
unalias nombre_alias

para versionar desde cierto commit
git tag -a v1.0 -m "mensaje como primera version de la app" codigo_commit
git tag me muestra las tag actuales
git show-ref --tags me muestra las referencias de los tag
git push origin --tags     para enviar tag
git tag -d nombre_tag     para borrarlo, pero es solo local
git push origin :refs/tags/nombre_tag   borra la referencia en github

git show-branch muestra todas las ramas con los cambios que han tenido. con --all salen mas datos
gitk de manera mas visual
git push origin nueva_rama manda la nueva rama a las branches de github

settings-manage access para agregar colaboradores
como colaborador si voy a avanzar en  la rama x, desde main hago git pull origin x

si resuelvo conflictos dsp de intentar hacer merge debo hacer add y commit 

crear gitignore en carpeta raiz del proyecto

github es como tener nuestro repo hosteado

rebase es como no haber hecho una rama para solucionar un bug y poner esos commits/actualizaciones directamente en la rama principal (se elimina la historia de la rama que se habia creado)

git stash guarda cambios en un lugar temporal (si apagas el pc se pierden)
git stash list (WIP work in progress)->ej:stash@{0}: WIP on main: 46d6cd4 ulitmo_commit 
git stash pop para traer de vuelta lo que habia guardado
git stash branch nombre_rama tiro esos cambios a una nueva rama (hay que hacer commit para q se desvinculen  los cambios de la rama anterior)
git stash drop para borrar stash

git clean para borrar archivos que no hemos agregado con git add 
hay q especificar la accion. --dry-run te dice cuales removerias
git clean -f para forzar la eliminacion (los del git ignore se ignoran)

git log --oneline (en la rama q tiene un commit q quiera traer) para ver cual es el commit q queremos y hacer cherry para subir solo hasta ese commit
git cherry-pick codigo_commit para traer solo los cambios hasta ese commit (no es recomendable usarla)

cuando haces commit y no querias
git commit -- amend     es como enmendar o solucionar, o sea que los cambios se pegan al commit anterior (te manda a editor para ver si quieres cambiar el  omentario, recordar salir esc :wq)

cuando rompes algo
git reflog sirve para ver todo, buscamos a donde queremos volver y copiamos el HEAD@{n}
reset --soft mantiene el area stagging(a lo q le das add)(casi no se usa) --hard reseta todo
git reset --hard HEAD@{n}

git grep Palabra te dice todos los lugares donde esta esa palabra
git grep -n palabara para q diga la linea 
git log -S "Palabra" busca los commits en los que se comentó esa palabara

git shortlog nos muestran todos los commits que han hecho los usuarios
git shortlog -sn solo muestra la cantidad 
git shortlog -sn --all tambien suma los q fueron eliminados
git shortlog -sn --all--no-merges para no incluir merges
git config --global alias.stats "git shortlog -sn --all--no-merges"     cuando haga git stats se ejecutara

git blame para ver cambios en archivo y quien y qué hizo
ls -l para ver carpetas y  navegar hasta la que tiene main.dart por ej
git blame main.dart o git blame -c main.dart se ve un poco mejor
vim README.md luego esc :set number te muestra las lineas del archivo, esc y :q
git blame README.md -L12,24 te dira los cambios de la linea 12 a la 24

los issues tiene numero #n, si en el comentario de mi commit agrego fixes/closes/resolves #n se linkeara al issue correspondiente

se pueden crear labels para situaciones especificas



.